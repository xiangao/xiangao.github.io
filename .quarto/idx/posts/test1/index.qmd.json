{"title":"Causal simulation","markdown":{"yaml":{"title":"Causal simulation","author":"Xiang Ao","date":"2025-10-01","categories":["news","code","analysis"],"format":{"revealjs":{"embed-resources":true}}},"headingText":"examples","containsRefs":false,"markdown":"\n\n\nEvans, R. J., & Didelez, V. (2024). \"Parameterizing and simulating from causal models\" is about simulating from a causal model.  I found that interesting.\n\nThe usual causal inference is to have a observational data, then assume causal structure, then estimate the parameters.  This paper is about the opposite:  Suppose we have a causal model, what kind of distribution would generate it?\n\nSuppose we are interested in joint distribution $p(x,a,y)$, $x$ is covariates, $a$ is treatment, $y$ is outcome.\n\n\n$$ \n\\begin{align}\np(x,a,y) &= p(x,a)p(y|x,a) \\\\\n         &= p(x,a)p_a(y|x) \\\\\n         &= p(x,a)\\frac{p_a(x,y)}{p_a(x)} \\\\\n         &= p(x,a)\\frac{p_a(x)p_a(y)c(x,y|a)}{p_a(x)} \\\\\n         &= p(x,a)p_a(y)c(x,y|a)\n\\end{align}\n$$\n\nBasically the joint distribution of $(x,a,y)$ can be factorized into the marginal distribution of $(x,a)$, the conditional distribution of $y$ given $x$ and $a$, and the copula $c(x,y|a)$.  The copula is a function that captures the dependence between $x$ and $y$ given $a$.  $(x,a)$ is the \"past\", which can be specified.  $p_a(y)$ is the \"marginal structure model\" which can be specified.  The copula model can also be specified.\n\nAbout copula:  copula is a function can link joint distribution to marginal distributions.  \n\n$$ p(x,y) = f(x)g(y)c(F(x),G(y)) $$\n\nwhere $F(x)$ and $G(y)$ are the marginal distributions of $x$ and $y$, respectively, and $c$ is the copula function that captures the dependence between $x$ and $y$.  The copula function is a multivariate distribution with uniform marginals.  It can be used to generate joint distributions from marginal distributions.\n\nHere $x$, $a$ and $y$ can all be vectors.\n\n\nWhat do we use this for?  We can use this to simulate data from a causal model, and then fit different models to the simulated data.  This allows to compare the performance of different models.  \n\n## example 1\n\nSuppose we have a causal graph like this:\n\n```{r dag1, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=FALSE}\nlibrary(ggplot2)\nlibrary(ggdag)\n\ng <- dagify(\n  Y ~ A,\n  Y ~ X,\n  A ~ X,\n  exposure = \"A\",\n  outcome = \"Y\",\n  coords = list(x = c(A = 1,  X = 2 , Y = 3),\n                y = c(A = 1,  X = 2, Y = 1))\n)\n\nggdag(g) + \n  theme_dag() \n```\n\nWe need to specify $P(y|do(a)) = \\sum_x P(x) P(y|x,a)$, where $P(x)$ is the marginal distribution of $x$, and $P(y|x,a)$ is the conditional distribution of $y$ given $x$ and $a$.  This is the \"marginal structural model\" (Robins, 2000).  Also the \"g-formula\".  \n\nWe also need to specify $P(x,a)$, the \"past\".\n\nFinally we need to specify the copula $c(x,y|a)$, which captures the dependence between $x$ and $y$ given $a$. Depending on different situations, different copula can be used.\n\nIn the \"causl\" package example, we specify:\n$$ X \\sim N(0,1) $$\n$$ A | X=x  \\sim N(x/2, 1) $$\n$$ Y | do(A=a) \\sim N({(a-1)/2}, 1) $$\nand Gaussian copula with correlation $\\rho = 2 expit(1)-1$.\n\n```{r sim0, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\nlibrary(causl)\n# formulae corresponding to covariates, treatments, outcomes and the dependence\nforms <- list(X ~ 1, A ~ X, Y ~ A, ~ 1)\n# vector of model families (3=gamma/exponential, 1=normal/Gaussian)\nfam <- c(1, 1, 1, 1)\n# list of parameters, including 'beta' (regression params) and 'phi' dispersion\npars <- list(X = list(beta=0, phi=1),   \n             A = list(beta=c(0,0.5), phi=1),\n             Y = list(beta=c(-0.5,0.5), phi=1),\n             cop = list(beta=1))\n\n## now create a `causl_model` object\ncm <- causl_model(formulas=forms, family=fam, pars=pars,method=\"inversion\")\n\n# now simulate 1000 observations\nset.seed(123456)\ndata <- rfrugal(n=1000, causl_model=cm)\nhead(data)\n```\n\nIn this example, first we specify the structure of the model using a list of formulas.  The first formula is for the covariates, the second for the treatments, the third for the outcomes, and the fourth for the dependence structure (copula).  Note that outcome $Y$ only depends on $A$ in this interventional distribution.\n\nThen we specify the families of the random variables.  Here we use exponential distribution for $X$, normal distribution for $A$ and $Y$, and Gaussian copula for the dependence structure.\n\nFinally we specify the parameters of the model, including regression coefficients and dispersion parameters.  For example, $Y \\sim A$ has two coefficients, intercept -.5 and slope .5.  \n\nThe `causl_model` object is then created using these components.\n\nIn this simple example, if we run a regression with $A$, $X$ in the model, on the simulated data, we would get the correct effect back:\n\n```{r sim1, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\nlm1 <- lm(Y ~ A*X, data=data)\nsummary(lm1)\n```\n\nWe can also use MLE:\n\n```{r sim2, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\nout <- fit_causl(data, formulas = list(X ~ 1, Y ~ A, ~ 1), family = c(1, 1, 1))\nout\n```\n\n## Plasmode simulation\n\nIn reality, we have a data set and we have a causal model.  We want to simulate data from the causal model, but we want the simulated data to have the same distribution as the original data.  This is called \"plasmode simulation\".  For example, we don't want to use the real outcome variable.  In stead, we simulate X's from the original data, Then simulate Y and A from the causal model.  We can then test which method works better in estimating the causal effect of $A$ on $Y$.\n\n```{r plasmode, echo=FALSE}\nlibrary(aciccomp2016)\nlibrary(dplyr)\n(dat <- as_tibble(input_2016)) # show 10 rows of first few variables\n\n```\n\n```{r sim3, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\n\n# Model for the causal effect of smoking on birthweight\nforms <- list(list(),\n              list(A ~ x_1 + x_3 + x_4),\n              list(Y ~ A),\n              list(~ 1))\n# fams <- list(integer(0), 5, 1, 1)\nfams <- list(integer(0), \"binomial\", \"gaussian\", 1)\npars <- list(A = list(beta=c(-1.5,0.03,0.02,0.05)),\n             Y = list(beta=c(3200, -500), phi=400^2),\n             cop = list(beta=-1))\n\ncm2 <- causl_model(formulas=forms, family=fams, pars=pars, dat = dat)\n \nset.seed(123456)\ndata2 <- rfrugal(causl_model=cm2)\nhead(data2)\n\n# we can also use rfrugalParam(), which is older version of rfrugal().\n#datAY <- rfrugalParam(formulas=forms, family=fams, pars=pars, dat=dat)\n\n```\n\nIn this specification, we have a binary treatment $A$ and a continuous outcome $Y$.  The covariates are $x_1$, $x_3$ and $x_4$.  The copula is a Gaussian copula with correlation -1.  We can then simulate the data.\n\n# a more complicated model\n\nLet's simulate a more complicated model:\n```{r dag2, include=TRUE, warning=FALSE,  cache=FALSE, message=FALSE, echo=TRUE}\nlibrary(ggplot2)\nlibrary(ggdag)\n\ng <- dagify(\n  A1 ~ L1,\n  L2 ~ L1,\n  L2 ~ A1,\n  A2 ~ A1,\n  A2 ~ L2,\n  Y ~ A2,\n  Y ~ L2,\n  Y ~ A1,\n  exposure = \"A2\",\n  outcome = \"Y\",\n  coords = list(x = c(L1 = 1,  L2 = 2, Y = 3, A1 = 1.5, A2 = 2.5),\n                y = c(L1 = 1,  L2 = 1, Y = 1, A1 = 1.5, A2 = 1.5))\n)\n\nggdag(g) + \n  theme_dag() \n```\nLet's see how to write a causal model:\n\n```{r sim4, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\n# formulae corresponding to covariates, treatments, outcomes and the dependence\nforms <- list(list(L1  ~ 1, L2 ~ L1*A1),   # covariates\n              list(A1 ~ L1, A2 ~ L2*A1), # treatments\n              Y ~ A1*A2*L2,             # outcome\n              ~ 1)\n\n# vector of model families (3=gamma/exponential, 1=normal/Gaussian)\n\nfams <- list(c(1, 1), c(5,5), 1, 1)\npars <- list(L1 = list(beta=0, phi=1),\n             L2 = list(beta=c(0.3,0.5,-0.2,-0.1), phi=1),\n             A1 = list(beta=c(-0.3,0.4), phi=1),\n             A2 = list(beta=c(0.5,0.3,0.1,0), phi=1),\n             Y = list(beta=c(0,1,2,0.5,1,0.2,0,0.8), phi=1), \n             cop = list(beta = 0.5))\n\n# we can use rfrugalParam() to simulate data from the model, or rfrugal().\n#dat <- rfrugalParam(n=1e4, formulas=forms, family = fams, pars=pars)\n#head(dat)\n\ncm3 <- causl_model(formulas=forms, family=fams, pars=pars)\n \nset.seed(123456)\ndata3 <- rfrugal(n=1e4,causl_model=cm3)\nhead(data3)\n\n\n```\n\nIf we have the correct specification for the outcome model, we'll get it right by linear model:\n\n```{r sim5, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\nm1 <- glm(Y ~ A1*A2*L2, data = data3)\nsummary(m1)\n\nlibrary(marginaleffects)\navg_comparisons(\n    model = m1,\n    variables = \"A2\")\n```\n\nSo the ATE is 2.5.\n\nLet's use \"lmtp\" package to estimate the treatment effect of $A_2$ on $Y$.\n```{r lmtp, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\n\nlibrary(lmtp)\n\nd1 <- function(data, trt) {\n  rep(1, nrow(data))\n}\nA <- \"A2\"\nY <- \"Y\"\nW <- c(\"L1\", \"L2\", \"A1\")\n\nset.seed(34465)\n\ntreat <- lmtp_tmle(\n  data = data3, \n  trt = \"A2\", \n  outcome = \"Y\", \n  baseline = W, \n  outcome_type = \"continuous\", \n  shift = d1, \n  folds = 1, \n  learners_trt = \"SL.glm\", \n  learners_outcome = \"SL.glm\"\n)\n\nprint(treat)\n\nd2 <- function(data, trt) {\n  rep(0, nrow(data))\n}\ncontrol <- lmtp_tmle(\n  data = data3, \n  trt = \"A2\", \n  outcome = \"Y\", \n  baseline = W, \n  outcome_type = \"continuous\", \n  shift = d2, \n  folds = 1, \n  learners_trt = \"SL.glm\", \n  learners_outcome = \"SL.glm\"\n)\n\nprint(control)\n\nlmtp_contrast(treat, ref = control)\n\n```\n","srcMarkdownNoYaml":"\n\n\nEvans, R. J., & Didelez, V. (2024). \"Parameterizing and simulating from causal models\" is about simulating from a causal model.  I found that interesting.\n\nThe usual causal inference is to have a observational data, then assume causal structure, then estimate the parameters.  This paper is about the opposite:  Suppose we have a causal model, what kind of distribution would generate it?\n\nSuppose we are interested in joint distribution $p(x,a,y)$, $x$ is covariates, $a$ is treatment, $y$ is outcome.\n\n\n$$ \n\\begin{align}\np(x,a,y) &= p(x,a)p(y|x,a) \\\\\n         &= p(x,a)p_a(y|x) \\\\\n         &= p(x,a)\\frac{p_a(x,y)}{p_a(x)} \\\\\n         &= p(x,a)\\frac{p_a(x)p_a(y)c(x,y|a)}{p_a(x)} \\\\\n         &= p(x,a)p_a(y)c(x,y|a)\n\\end{align}\n$$\n\nBasically the joint distribution of $(x,a,y)$ can be factorized into the marginal distribution of $(x,a)$, the conditional distribution of $y$ given $x$ and $a$, and the copula $c(x,y|a)$.  The copula is a function that captures the dependence between $x$ and $y$ given $a$.  $(x,a)$ is the \"past\", which can be specified.  $p_a(y)$ is the \"marginal structure model\" which can be specified.  The copula model can also be specified.\n\nAbout copula:  copula is a function can link joint distribution to marginal distributions.  \n\n$$ p(x,y) = f(x)g(y)c(F(x),G(y)) $$\n\nwhere $F(x)$ and $G(y)$ are the marginal distributions of $x$ and $y$, respectively, and $c$ is the copula function that captures the dependence between $x$ and $y$.  The copula function is a multivariate distribution with uniform marginals.  It can be used to generate joint distributions from marginal distributions.\n\nHere $x$, $a$ and $y$ can all be vectors.\n\n# examples\n\nWhat do we use this for?  We can use this to simulate data from a causal model, and then fit different models to the simulated data.  This allows to compare the performance of different models.  \n\n## example 1\n\nSuppose we have a causal graph like this:\n\n```{r dag1, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=FALSE}\nlibrary(ggplot2)\nlibrary(ggdag)\n\ng <- dagify(\n  Y ~ A,\n  Y ~ X,\n  A ~ X,\n  exposure = \"A\",\n  outcome = \"Y\",\n  coords = list(x = c(A = 1,  X = 2 , Y = 3),\n                y = c(A = 1,  X = 2, Y = 1))\n)\n\nggdag(g) + \n  theme_dag() \n```\n\nWe need to specify $P(y|do(a)) = \\sum_x P(x) P(y|x,a)$, where $P(x)$ is the marginal distribution of $x$, and $P(y|x,a)$ is the conditional distribution of $y$ given $x$ and $a$.  This is the \"marginal structural model\" (Robins, 2000).  Also the \"g-formula\".  \n\nWe also need to specify $P(x,a)$, the \"past\".\n\nFinally we need to specify the copula $c(x,y|a)$, which captures the dependence between $x$ and $y$ given $a$. Depending on different situations, different copula can be used.\n\nIn the \"causl\" package example, we specify:\n$$ X \\sim N(0,1) $$\n$$ A | X=x  \\sim N(x/2, 1) $$\n$$ Y | do(A=a) \\sim N({(a-1)/2}, 1) $$\nand Gaussian copula with correlation $\\rho = 2 expit(1)-1$.\n\n```{r sim0, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\nlibrary(causl)\n# formulae corresponding to covariates, treatments, outcomes and the dependence\nforms <- list(X ~ 1, A ~ X, Y ~ A, ~ 1)\n# vector of model families (3=gamma/exponential, 1=normal/Gaussian)\nfam <- c(1, 1, 1, 1)\n# list of parameters, including 'beta' (regression params) and 'phi' dispersion\npars <- list(X = list(beta=0, phi=1),   \n             A = list(beta=c(0,0.5), phi=1),\n             Y = list(beta=c(-0.5,0.5), phi=1),\n             cop = list(beta=1))\n\n## now create a `causl_model` object\ncm <- causl_model(formulas=forms, family=fam, pars=pars,method=\"inversion\")\n\n# now simulate 1000 observations\nset.seed(123456)\ndata <- rfrugal(n=1000, causl_model=cm)\nhead(data)\n```\n\nIn this example, first we specify the structure of the model using a list of formulas.  The first formula is for the covariates, the second for the treatments, the third for the outcomes, and the fourth for the dependence structure (copula).  Note that outcome $Y$ only depends on $A$ in this interventional distribution.\n\nThen we specify the families of the random variables.  Here we use exponential distribution for $X$, normal distribution for $A$ and $Y$, and Gaussian copula for the dependence structure.\n\nFinally we specify the parameters of the model, including regression coefficients and dispersion parameters.  For example, $Y \\sim A$ has two coefficients, intercept -.5 and slope .5.  \n\nThe `causl_model` object is then created using these components.\n\nIn this simple example, if we run a regression with $A$, $X$ in the model, on the simulated data, we would get the correct effect back:\n\n```{r sim1, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\nlm1 <- lm(Y ~ A*X, data=data)\nsummary(lm1)\n```\n\nWe can also use MLE:\n\n```{r sim2, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\nout <- fit_causl(data, formulas = list(X ~ 1, Y ~ A, ~ 1), family = c(1, 1, 1))\nout\n```\n\n## Plasmode simulation\n\nIn reality, we have a data set and we have a causal model.  We want to simulate data from the causal model, but we want the simulated data to have the same distribution as the original data.  This is called \"plasmode simulation\".  For example, we don't want to use the real outcome variable.  In stead, we simulate X's from the original data, Then simulate Y and A from the causal model.  We can then test which method works better in estimating the causal effect of $A$ on $Y$.\n\n```{r plasmode, echo=FALSE}\nlibrary(aciccomp2016)\nlibrary(dplyr)\n(dat <- as_tibble(input_2016)) # show 10 rows of first few variables\n\n```\n\n```{r sim3, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\n\n# Model for the causal effect of smoking on birthweight\nforms <- list(list(),\n              list(A ~ x_1 + x_3 + x_4),\n              list(Y ~ A),\n              list(~ 1))\n# fams <- list(integer(0), 5, 1, 1)\nfams <- list(integer(0), \"binomial\", \"gaussian\", 1)\npars <- list(A = list(beta=c(-1.5,0.03,0.02,0.05)),\n             Y = list(beta=c(3200, -500), phi=400^2),\n             cop = list(beta=-1))\n\ncm2 <- causl_model(formulas=forms, family=fams, pars=pars, dat = dat)\n \nset.seed(123456)\ndata2 <- rfrugal(causl_model=cm2)\nhead(data2)\n\n# we can also use rfrugalParam(), which is older version of rfrugal().\n#datAY <- rfrugalParam(formulas=forms, family=fams, pars=pars, dat=dat)\n\n```\n\nIn this specification, we have a binary treatment $A$ and a continuous outcome $Y$.  The covariates are $x_1$, $x_3$ and $x_4$.  The copula is a Gaussian copula with correlation -1.  We can then simulate the data.\n\n# a more complicated model\n\nLet's simulate a more complicated model:\n```{r dag2, include=TRUE, warning=FALSE,  cache=FALSE, message=FALSE, echo=TRUE}\nlibrary(ggplot2)\nlibrary(ggdag)\n\ng <- dagify(\n  A1 ~ L1,\n  L2 ~ L1,\n  L2 ~ A1,\n  A2 ~ A1,\n  A2 ~ L2,\n  Y ~ A2,\n  Y ~ L2,\n  Y ~ A1,\n  exposure = \"A2\",\n  outcome = \"Y\",\n  coords = list(x = c(L1 = 1,  L2 = 2, Y = 3, A1 = 1.5, A2 = 2.5),\n                y = c(L1 = 1,  L2 = 1, Y = 1, A1 = 1.5, A2 = 1.5))\n)\n\nggdag(g) + \n  theme_dag() \n```\nLet's see how to write a causal model:\n\n```{r sim4, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\n# formulae corresponding to covariates, treatments, outcomes and the dependence\nforms <- list(list(L1  ~ 1, L2 ~ L1*A1),   # covariates\n              list(A1 ~ L1, A2 ~ L2*A1), # treatments\n              Y ~ A1*A2*L2,             # outcome\n              ~ 1)\n\n# vector of model families (3=gamma/exponential, 1=normal/Gaussian)\n\nfams <- list(c(1, 1), c(5,5), 1, 1)\npars <- list(L1 = list(beta=0, phi=1),\n             L2 = list(beta=c(0.3,0.5,-0.2,-0.1), phi=1),\n             A1 = list(beta=c(-0.3,0.4), phi=1),\n             A2 = list(beta=c(0.5,0.3,0.1,0), phi=1),\n             Y = list(beta=c(0,1,2,0.5,1,0.2,0,0.8), phi=1), \n             cop = list(beta = 0.5))\n\n# we can use rfrugalParam() to simulate data from the model, or rfrugal().\n#dat <- rfrugalParam(n=1e4, formulas=forms, family = fams, pars=pars)\n#head(dat)\n\ncm3 <- causl_model(formulas=forms, family=fams, pars=pars)\n \nset.seed(123456)\ndata3 <- rfrugal(n=1e4,causl_model=cm3)\nhead(data3)\n\n\n```\n\nIf we have the correct specification for the outcome model, we'll get it right by linear model:\n\n```{r sim5, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\nm1 <- glm(Y ~ A1*A2*L2, data = data3)\nsummary(m1)\n\nlibrary(marginaleffects)\navg_comparisons(\n    model = m1,\n    variables = \"A2\")\n```\n\nSo the ATE is 2.5.\n\nLet's use \"lmtp\" package to estimate the treatment effect of $A_2$ on $Y$.\n```{r lmtp, include=TRUE, warning=FALSE,  cache=TRUE, message=FALSE, echo=TRUE}\n\nlibrary(lmtp)\n\nd1 <- function(data, trt) {\n  rep(1, nrow(data))\n}\nA <- \"A2\"\nY <- \"Y\"\nW <- c(\"L1\", \"L2\", \"A1\")\n\nset.seed(34465)\n\ntreat <- lmtp_tmle(\n  data = data3, \n  trt = \"A2\", \n  outcome = \"Y\", \n  baseline = W, \n  outcome_type = \"continuous\", \n  shift = d1, \n  folds = 1, \n  learners_trt = \"SL.glm\", \n  learners_outcome = \"SL.glm\"\n)\n\nprint(treat)\n\nd2 <- function(data, trt) {\n  rep(0, nrow(data))\n}\ncontrol <- lmtp_tmle(\n  data = data3, \n  trt = \"A2\", \n  outcome = \"Y\", \n  baseline = W, \n  outcome_type = \"continuous\", \n  shift = d2, \n  folds = 1, \n  learners_trt = \"SL.glm\", \n  learners_outcome = \"SL.glm\"\n)\n\nprint(control)\n\nlmtp_contrast(treat, ref = control)\n\n```\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","embed-resources":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.7.32","auto-stretch":true,"editor":"visual","title-block-banner":true,"title":"Causal simulation","author":"Xiang Ao","date":"2025-10-01","categories":["news","code","analysis"]}}},"projectFormats":["html"]}